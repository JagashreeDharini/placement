#include <stdio.h>
#include <string.h>

void compare(const char *str1, const char *str2) {
    int len = strlen(str1);
    
    printf("Mismatched pairs:\n");
    for (int i = 0; i < len; i++) {
        if (str1[i] != str2[i]) {
            printf("%c,%c    ", str1[i], str2[i]);
        }
    }
}

int main() {
    const char *str1 = "antonyandcleopatra";
    const char *str2 = "antaniandcleapadra";

    printf("Input strings:\n");
    printf("str1: \"%s\"\n", str1);
    printf("str2: \"%s\"\n", str2);
    
    compare(str1, str2);
    
    return 0;
}


#include <stdio.h>
#include <string.h>

void compare(const char *str1, const char *str2) {
    int len = strlen(str1);
    
    printf("Mismatched pairs:\n");
    for (int i = 0; i < len; i++) {
        if (str1[i] != str2[i]) {
            printf("%c%c,%c%c   ", str1[i], str2[i], str2[i], str1[i]);
        }
    }
}

int main() {
    const char *str1 = "abcddefgikom";
    const char *str2 = "abdcdeffgklm";

    printf("Input strings:\n");
    printf("str1: \"%s\"\n", str1);
    printf("str2: \"%s\"\n", str2);
    
    compare(str1, str2);
    
    return 0;
}


#include <stdio.h>
#include <string.h>

void justifyText(char *text, int padding) {
    int textLength = strlen(text);
    int spacesToAdd = padding - textLength;
    int wordCount = 1; // Word count starts at 1

  
    for (int i = 0; i < textLength; i++) {
        if (text[i] == '_') {
            wordCount++;
        }
    }

 
    int spacesBetweenWords = wordCount > 1 ? spacesToAdd / (wordCount - 1) : 0;
    int extraSpaces = wordCount > 1 ? spacesToAdd % (wordCount - 1) : spacesToAdd;

    printf("%s", strtok(text, "_"));
    for (int i = 1; i < wordCount; i++) {
  
        for (int j = 0; j < spacesBetweenWords; j++) {
            printf(" ");
        }
        
        if (extraSpaces > 0) {
            printf(" ");
            extraSpaces--;
        }
      
        printf("%s", strtok(NULL, "_"));
    }
    printf("\n");
}

int main() {
    char text[] = "zoho_corp_madurai";
    int padding = 25;

    printf("Input text: %s\n", text);
    printf("Padding: %d\n", padding);

    printf("Justified text:\n");
    justifyText(text, padding);

    return 0;
}


#include <stdio.h>
#include <string.h>
#include <ctype.h>

int isPalindrome(const char *str) {
    int left = 0;
    int right = strlen(str) - 1;
    
    while (left < right) {
        
        while (!isalpha(str[left])) {
            left++;
        }
        
        while (!isalpha(str[right])) {
            right--;
        }
        
       
        if (tolower(str[left]) != tolower(str[right])) {
            return 0; 
        }
        
        left++;
        right--;
    }
    return 1; 
}

int main() {
    const char *input = "malayalam";
    
    printf("Input string: %s\n", input);
    if (isPalindrome(input)) {
        printf("Output: True\n");
    } else {
        printf("Output: False\n");
    }
    
    return 0;
}


#include <stdio.h>
#include <string.h>
#include <ctype.h>


int isAlphabet(char ch) {
    return (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z');
}


int isPalindrome(const char *str) {
    int left = 0;
    int right = strlen(str) - 1;

    while (left < right) {
       
        while (!isAlphabet(str[left]) && left < right) {
            left++;
        }
      
        while (!isAlphabet(str[right]) && left < right) {
            right--;
        }

        if (tolower(str[left]) != tolower(str[right])) {
            return 0;
        }

        left++;
        right--;
    }
    
    return 1;
}

int main() {
    const char *input = "something";

    printf("Input string: %s\n", input);
    if (isPalindrome(input)) {
        printf("Output: True\n");
    } else {
        printf("Output: False\n");
    }

    return 0;
}


#include <stdio.h>
#include <string.h>


void swap(char *a, int i, int j) {
    char temp = a[i];
    a[i] = a[j];
    a[j] = temp;
}

void permute(char *str, int left, int right) {
    if (left == right) {
        printf("%s\n", str); 
    } else {
        for (int i = left; i <= right; i++) {
          
            int shouldSwap = 1;
            for (int j = left; j < i; j++) {
                if (str[j] == str[i]) {
                    shouldSwap = 0;
                    break;
                }
            }
            if (shouldSwap) {
                swap(str, left, i);
                permute(str, left + 1, right);
                swap(str, left, i); 
            }
        }
    }
}

int main() {
    char str[] = "good";
    int len = strlen(str);
    
    printf("Input string: %s\n", str);
    printf("Permutations without repetitions:\n");
    permute(str, 0, len - 1);
    
    return 0;
}

#include <stdio.h>
#include <string.h>

void findMismatchedSubstrings(const char *str1, const char *str2) {
    int len1 = strlen(str1);
    int len2 = strlen(str2);
    
    
    for (int i = 0; i < len1 && i < len2; i++) {
        if (str1[i] != str2[i]) {
           
            char substr1[100] = "", substr2[100] = "";
            
            
            int j = i;
            while (j < len1 && str1[j] != str2[i]) {
                strncat(substr1, &str1[j], 1);
                j++;
            }
            j = i;
            while (j < len2 && str2[j] != str1[i]) {
                strncat(substr2, &str2[j], 1);
                j++;
            }
            
           
            printf("%s,%s   ", substr1, substr2);
        }
    }
    printf("\n");
}

int main() {
    const char *str1 = "AABBCCDD";
    const char *str2 = "ABCDCCAD";

    printf("Input strings:\n");
    printf("str1: %s\n", str1);
    printf("str2: %s\n", str2);
    
    printf("Mismatched substrings:\n");
    findMismatchedSubstrings(str1, str2);
    
    return 0;
}

#include <stdio.h>
#include <string.h>
#include <ctype.h>

void countVowels(const char *str) {
  
    int countA = 0, countE = 0, countI = 0, countO = 0, countU = 0;

    for (int i = 0; str[i] != '\0'; i++) {
        char ch = tolower(str[i]);
        switch (ch) {
            case 'a':
                countA++;
                break;
            case 'e':
                countE++;
                break;
            case 'i':
                countI++;
                break;
            case 'o':
                countO++;
                break;
            case 'u':
                countU++;
                break;
        }
    }
    
    
    printf("a:%d   e:%d   i:%d   o:%d   u:%d\n", countA, countE, countI, countO, countU);
}

int main() {
    const char *input = "india";
    
    printf("Input string: %s\n", input);
    printf("Vowel counts:\n");
    countVowels(input);
    
    return 0;
}


#include <stdio.h>


int isPalindrome(int num) {
    int reversed = 0, original = num;
    while (num > 0) {
        reversed = reversed * 10 + num % 10;
        num /= 10;
    }
    return original == reversed;
}


int nextPalindrome(int num) {
    num++; 
    while (!isPalindrome(num)) {
        num++; 
    }
    return num;
}

int main() {
    int input = 123;
    
    printf("Input: %d\n", input);
    printf("Next palindrome number: %d\n", nextPalindrome(input));
    
    return 0;
}

#include <stdio.h>
#include <string.h>


int isPalindrome(int num) {
    int reversed = 0, original = num;
    while (num > 0) {
        reversed = reversed * 10 + num % 10;
        num /= 10;
    }
    return original == reversed;
}


int nextPalindrome(int num) {
    num++; 
    while (!isPalindrome(num)) {
        num++; 
    }
    return num;
}


int nextPalindromeOdd(int num) {
    int originalNum = num;
    int reversedNum = 0;

    
    while (num > 0) {
        reversedNum = reversedNum * 10 + num % 10;
        num /= 10;
    }

   
    return originalNum * 10000 + reversedNum;
}

int main() {
    int input = 12345;
    
    printf("Input: %d\n", input);
    
    if (input % 2 == 0) {
        printf("Next palindrome number: %d\n", nextPalindrome(input));
    } else {
        printf("Next palindrome number: %d\n", nextPalindromeOdd(input / 10)); 
    }
    
    return 0;
}
